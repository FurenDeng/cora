#!/usr/bin/env python

from argh import arg, named, dispatch_commands


def write_map(filename, data, freq):
    # Write out the map into an HDF5 file.

    import h5py
    import numpy as np

    # Make into 3D array
    if data.ndim == 3:
        polmap = np.array(['I', 'Q', 'U', 'V'])
    else:
        data = data[:, np.newaxis, :]
        polmap = np.array(['I'])

    # Construct frequency index map
    freqmap = np.zeros(len(freq), dtype=[('centre', np.float64), ('width', np.float64)])
    freqmap['centre'][:] = freq
    freqmap['width'][:] = np.diff(freq)[0]

    # Open up file for writing
    with h5py.File(filename) as f:
        f.attrs['__memh5_distributed_file'] = True

        dset = f.create_dataset('map', data=data)
        dset.attrs['axis'] = np.array(['freq', 'pol', 'pixel'])
        dset.attrs['__memh5_distributed_dset'] = True

        dset = f.create_dataset('index_map/freq', data=freqmap)
        dset.attrs['__memh5_distributed_dset'] = False
        dset = f.create_dataset('index_map/pol', data=polmap)
        dset.attrs['__memh5_distributed_dset'] = False


@arg('nside', type=int, help='Healpix NSIDE of map.')
@arg('freq_lower', type=float, help='Lowest frequency in map.')
@arg('freq_upper', type=float, help='Highest frequency in map.')
@arg('nfreq', type=int, help='Number of frequency channels.')
@arg('filename', type=str, help='Name of file to write.')
@arg('--nopol', help='Construct unpolarised map only.')
@arg('--chimefreq', help='Define frequency bands like CHIME.')
@arg('--maxflux', type=float, help='Maximum flux of point included point source.')
def foreground(nside, freq_lower, freq_upper, nfreq, filename, nopol=False, chimefreq=False, maxflux=1e6):
    """Generate a full foreground sky map."""

    from cora.foreground import galaxy, pointsource

    # Read in arguments.
    gal = galaxy.ConstrainedGalaxy()
    gal.nside = nside
    gal.nu_lower = freq_lower
    gal.nu_upper = freq_upper
    gal.nu_num = nfreq
    gal.freq_mode_chime = chimefreq

    # Fetch galactic sky
    cs = gal.getpolsky() if not nopol else gal.getsky()

    # Fetch point source maps
    ps = pointsource.CombinedPointSources.like_map(gal)
    ps.flux_max = maxflux

    cs = cs + (ps.getpolsky() if not nopol else ps.getsky())

    # Save map
    write_map(filename, cs, gal.nu_pixels)


@arg('nside', type=int, help='Healpix NSIDE of map.')
@arg('freq_lower', type=float, help='Lowest frequency in map.')
@arg('freq_upper', type=float, help='Highest frequency in map.')
@arg('nfreq', type=int, help='Number of frequency channels.')
@arg('filename', type=str, help='Name of file to write.')
@arg('--chimefreq', help='Define frequency bands like CHIME.')
@arg('--nopol', help='Construct unpolarised map only.')
def galaxy(nside, freq_lower, freq_upper, nfreq, filename, nopol=False, chimefreq=False):
    """Generate a galaxy only foreground map."""

    from cora.foreground import galaxy

    # Read in arguments.
    gal = galaxy.ConstrainedGalaxy()
    gal.nside = nside
    gal.nu_lower = freq_lower
    gal.nu_upper = freq_upper
    gal.nu_num = nfreq
    gal.freq_mode_chime = chimefreq

    # Fetch galactic sky
    cs = gal.getpolsky() if not nopol else gal.getsky()

    # Save map
    write_map(filename, cs, gal.nu_pixels)


@arg('nside', type=int, help='Healpix NSIDE of map.')
@arg('freq_lower', type=float, help='Lowest frequency in map.')
@arg('freq_upper', type=float, help='Highest frequency in map.')
@arg('nfreq', type=int, help='Number of frequency channels.')
@arg('filename', type=str, help='Name of file to write.')
@arg('--nopol', help='Construct unpolarised map only.')
@arg('--chimefreq', help='Define frequency bands like CHIME.')
@arg('--maxflux', type=float, help='Maximum flux of point included point source.')
def pointsource(nside, freq_lower, freq_upper, nfreq, filename, nopol=False, chimefreq=False, maxflux=1e6):
    """Generate a point source only foreground map."""

    from cora.foreground import pointsource

    # Fetch point source maps
    ps = pointsource.CombinedPointSources()
    ps.flux_max = maxflux
    ps.nside = nside
    ps.nu_lower = freq_lower
    ps.nu_upper = freq_upper
    ps.nu_num = nfreq
    ps.freq_mode_chime = chimefreq

    cs = ps.getpolsky() if not nopol else ps.getsky()

    # Save map
    write_map(filename, cs, ps.nu_pixels)


@arg('nside', type=int, help='Healpix NSIDE of map.')
@arg('freq_lower', type=float, help='Lowest frequency in map.')
@arg('freq_upper', type=float, help='Highest frequency in map.')
@arg('nfreq', type=int, help='Number of frequency channels.')
@arg('filename', type=str, help='Name of file to write.')
@arg('--nopol', help='Construct unpolarised map only.')
@arg('--chimefreq', help='Define frequency bands like CHIME.')
@arg('--eor', help='Use parameters more suitable for reionisation epoch.')
@named('21cm')
def _21cm(nside, freq_lower, freq_upper, nfreq, filename, nopol=False, chimefreq=False, eor=False):

    from cora.signal import corr21cm

    # Read in arguments.
    if eor:
        cr = corr21cm.EoR21cm()
    else:
        cr = corr21cm.Corr21cm()

    cr.nside = nside
    cr.nu_lower = freq_lower
    cr.nu_upper = freq_upper
    cr.nu_num = nfreq
    cr.freq_mode_chime = chimefreq

    # Generate signal realisation and save.
    sg_map = cr.getpolsky() if not nopol else cr.getsky()

    # Save map
    write_map(filename, sg_map, cr.nu_pixels)


@arg('nside', type=int, help='Healpix NSIDE of map.')
@arg('freq_lower', type=float, help='Lowest frequency in map.')
@arg('freq_upper', type=float, help='Highest frequency in map.')
@arg('nfreq', type=int, help='Number of frequency channels.')
@arg('filename', type=str, help='Name of file to write.')
@arg('--chimefreq', help='Define frequency bands like CHIME.')
def gaussianfg(nside, freq_lower, freq_upper, nfreq, filename, chimefreq=False):

    import numpy as np

    from cora.core import skysim
    from cora.util import hputil
    from cora.foreground import galaxy

    fsyn = galaxy.FullSkySynchrotron()
    fpol = galaxy.FullSkyPolarisedSynchrotron()

    # Set frequency parameters
    fsyn.nu_lower = freq_lower
    fsyn.nu_upper = freq_upper
    fsyn.nu_num = nfreq
    fsyn.freq_mode_chime = chimefreq

    lmax = 3 * nside
    npol = 4

    cv_fg = np.zeros((lmax+1, npol, nfreq, npol, nfreq))

    cv_fg[:, 0, :, 0, :] = skysim.clarray(fsyn.angular_powerspectrum, lmax, fsyn.nu_pixels)
    cv_fg[:, 1, :, 1, :] = skysim.clarray(fpol.angular_powerspectrum, lmax, fsyn.nu_pixels)
    cv_fg[:, 2, :, 2, :] = skysim.clarray(fpol.angular_powerspectrum, lmax, fsyn.nu_pixels)

    cv_fg = cv_fg.reshape(lmax+1, npol*nfreq, npol*nfreq)

    alms = skysim.mkfullsky(cv_fg, nside, alms=True).reshape(npol, nfreq, lmax+1, lmax+1)
    alms = alms.transpose((1, 0, 2, 3))

    maps = hputil.sphtrans_inv_sky(alms, nside)

    # Save map
    write_map(filename, maps, fsyn.nu_pixels)


if __name__ == '__main__':
    dispatch_commands([foreground, galaxy, pointsource, _21cm, gaussianfg])
